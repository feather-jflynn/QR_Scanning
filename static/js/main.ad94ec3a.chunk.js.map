{"version":3,"sources":["QrCodeReader.js","App.js","serviceWorker.js","index.js"],"names":["QRCodeReader","fn","qrCode","setQrCode","height","window","innerHeight","width","innerWidth","videoRef","createRef","canvasRef","handleAnimationFrame","requestAnimationFrame","scan","a","navigator","mediaDevices","getUserMedia","audio","video","facingMode","mediaStream","current","srcObject","playsinline","play","console","log","useEffect","canvasContext","getContext","readyState","HAVE_ENOUGH_DATA","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","handlelQrCode","ref","hidden","App","useState","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QASO,IAAMA,EAAe,SAAC,GAAyB,IANpCC,EAMYC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAC9BC,EAASC,OAAOC,YAChBC,EAAQF,OAAOG,WAEfC,EAAWC,sBACXC,EAAYD,sBAEZE,EAAuB,kBAAMC,sBAAsBC,IAbzCb,EAeR,sBAAC,4BAAAc,EAAA,+EAEqBC,UAAUC,aAAaC,aAAa,CAC5DC,OAAO,EACPC,MAAO,CAAEhB,SAAQG,QAAOc,WAAY,iBAJjC,OAECC,EAFD,OAOLb,EAASc,QAAQC,UAAYF,EAC7Bb,EAASc,QAAQE,aAAc,EAC/BhB,EAASc,QAAQG,OAEjBd,IAXK,kDAaLe,QAAQC,IAAR,MAbK,0DAdTC,qBAAU,WACR5B,MACC,CAACA,IA6BJ,IAAMa,EAAO,WACX,IAAMgB,EAAgBnB,EAAUY,QAAQQ,WAAW,MAEnD,GAAItB,EAASc,QAAQS,aAAevB,EAASc,QAAQU,iBAAkB,CACrEtB,EAAUY,QAAQhB,MAAQA,EAC1BI,EAAUY,QAAQnB,OAASA,EAE3B0B,EAAcI,UAAUzB,EAASc,QAAS,EAAG,EAAGhB,EAAOH,GAEvD,IAAM+B,EAAYL,EAAcM,aAAa,EAAG,EAAG7B,EAAOH,GAEpDiC,EAAOC,IAAKH,EAAUI,KAAMJ,EAAU5B,MAAO4B,EAAU/B,OAAQ,CACnEoC,kBAAmB,eAGjBH,EACFI,EAAcJ,GAEdzB,SAGFA,KAIE6B,EAAgB,SAACJ,GACJA,EAATE,OAEKrC,GACXC,EAAUkC,EAAKE,OAInB,OACE,6BACE,2BAAOG,IAAKjC,IACZ,4BAAQkC,QAAQ,EAAMD,IAAK/B,MCtDlBiC,MAbf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACN3C,EADM,KACEC,EADF,KAGb,OACE,yBAAK2C,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAc5C,OAAQA,EAAQC,UAAWA,IACzC,6BAAMD,MCCM6C,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.ad94ec3a.chunk.js","sourcesContent":["import React, { useEffect, createRef } from 'react';\nimport jsQR from 'jsqr';\n\nfunction useMount(fn) {\n  useEffect(() => {\n    fn();\n  }, [fn])\n}\n\nexport const QRCodeReader = ({qrCode, setQrCode}) => {\n  const height = window.innerHeight;\n  const width = window.innerWidth;\n\n  const videoRef = createRef();\n  const canvasRef = createRef();\n\n  const handleAnimationFrame = () => requestAnimationFrame(scan);\n\n  useMount(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: { height, width, facingMode: \"environment\" }\n      });\n\n      videoRef.current.srcObject = mediaStream;\n      videoRef.current.playsinline = true; // required to tell iOS safari we don't want fullscreen\n      videoRef.current.play();\n\n      handleAnimationFrame();\n    } catch(err) {\n      console.log(err);\n    }\n  });\n\n  const scan = () => {\n    const canvasContext = canvasRef.current.getContext('2d');\n\n    if (videoRef.current.readyState === videoRef.current.HAVE_ENOUGH_DATA) {\n      canvasRef.current.width = width;\n      canvasRef.current.height = height;\n\n      canvasContext.drawImage(videoRef.current, 0, 0, width, height);\n\n      const imageData = canvasContext.getImageData(0, 0, width, height);\n\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: 'dontInvert'\n      });\n\n      if (code) {\n        handlelQrCode(code);\n      } else {\n        handleAnimationFrame();\n      }\n    } else {\n      handleAnimationFrame();\n    }\n  }\n\n  const handlelQrCode = (code) => {\n    const { data } = code;\n\n    if (data !== qrCode) {\n      setQrCode(code.data);\n    }\n  }\n\n  return (\n    <div>\n      <video ref={videoRef} />\n      <canvas hidden={true} ref={canvasRef} />\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { QRCodeReader } from './QrCodeReader';\n\nfunction App() {\n  const [qrCode, setQrCode] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <QRCodeReader qrCode={qrCode} setQrCode={setQrCode} />\n        <div>{qrCode}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}