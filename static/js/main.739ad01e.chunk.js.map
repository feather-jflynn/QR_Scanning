{"version":3,"sources":["QrCodeReader.js","App.js","serviceWorker.js","index.js"],"names":["QRCodeReader","height","window","innerHeight","width","innerWidth","videoRef","createRef","canvasRef","useState","qrCode","setQrCode","handlelQrCode","useCallback","data","scan","a","current","readyState","HAVE_ENOUGH_DATA","canvasContext","getContext","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","requestAnimationFrame","useEffect","console","log","Boolean","navigator","mediaDevices","getUserMedia","codeReader","BrowserQRCodeReader","decodeFromInputVideoDevice","undefined","result","text","hidden","ref","playsInline","className","App","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAIaA,EAAe,WAC1B,IAAMC,EAASC,OAAOC,YAChBC,EAAQF,OAAOG,WAEfC,EAAWC,sBACXC,EAAYD,sBALc,EAOJE,mBAAS,MAPL,mBAOzBC,EAPyB,KAOjBC,EAPiB,KAS1BC,EAAgBC,uBAAY,SAACC,GAC7BA,IAASJ,GACXC,EAAUG,KAEX,CAACJ,IAQEK,EAAOF,sBAAW,sBAAC,gCAAAG,EAAA,sDACnBV,EAASW,SAAWX,EAASW,QAAQC,aAAeZ,EAASW,QAAQE,mBACjEC,EAAgBZ,EAAUS,QAAQI,WAAW,MAEnDb,EAAUS,QAAQb,MAAQA,EAC1BI,EAAUS,QAAQhB,OAASA,EAE3BmB,EAAcE,UAAUhB,EAASW,QAAS,EAAG,EAAGb,EAAOH,GAEjDsB,EAAYH,EAAcI,aAAa,EAAG,EAAGpB,EAAOH,IAEpDwB,EAAOC,IAAKH,EAAUT,KAAMS,EAAUnB,MAAOmB,EAAUtB,OAAQ,CACnE0B,kBAAmB,iBAInBf,EAAca,EAAKX,OAGvBc,sBAAsBb,GAnBC,2CAoBtB,CAACP,EAAWF,EAAUL,EAAQG,EAAOQ,IAmDxC,OAtCAiB,qBAAU,WAER,sBAAC,8BAAAb,EAAA,kEAEGc,QAAQC,IAAI,YACSC,QAAQC,UAAUC,cAAgBD,UAAUC,aAAaC,gBAE1D7B,EAASW,QALhC,uBAqBWmB,EAAa,IAAIC,sBArB5B,SAwB0BD,EAAWE,gCAA2BC,EAAWjC,EAASW,SAxBpF,OAwBWuB,EAxBX,OA0BK5B,EAAc4B,EAAOC,MA1B1B,yDA+BGX,QAAQC,IAAR,MA/BH,yDAAD,KAkCC,CAACzB,EAAUL,EAAQG,EAAOW,EAAMH,IAGjC,kBAAC,WAAD,KACE,4BAAQ8B,QAAQ,EAAMC,IAAKnC,IAC3B,2BAAOmC,IAAKrC,EAAUsC,aAAa,IACvB,OAAXlC,GAAmB,yBAAKmC,UAAU,WAAWnC,KCzFrCoC,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,QCMcb,QACW,cAA7B9B,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.739ad01e.chunk.js","sourcesContent":["import React, { useEffect, createRef, Fragment, useCallback, useState } from 'react';\nimport { BrowserQRCodeReader } from '@zxing/library';\nimport jsQR from 'jsqr';\n\nexport const QRCodeReader = () => {\n  const height = window.innerHeight;\n  const width = window.innerWidth;\n\n  const videoRef = createRef();\n  const canvasRef = createRef();\n\n  const [qrCode, setQrCode] = useState(null);\n\n  const handlelQrCode = useCallback((data) => {\n    if (data !== qrCode) {\n      setQrCode(data);\n    }\n  }, [qrCode])\n\n  /**\n   * This method is responsible for \"scanning\" the QR Code\n   * by taking the media stream data from the video element,\n   * drawing that image on a hidden canvas element, and handing\n   * off that image data to jsQR which decodes the image data.\n   */\n  const scan = useCallback(async () => {\n    if (videoRef.current && videoRef.current.readyState === videoRef.current.HAVE_ENOUGH_DATA) {\n      const canvasContext = canvasRef.current.getContext('2d');\n\n      canvasRef.current.width = width;\n      canvasRef.current.height = height;\n\n      canvasContext.drawImage(videoRef.current, 0, 0, width, height);\n\n      const imageData = canvasContext.getImageData(0, 0, width, height);\n\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: 'dontInvert'\n      });\n\n      if (code) {\n        handlelQrCode(code.data);\n      }\n    }\n    requestAnimationFrame(scan)\n  }, [canvasRef, videoRef, height, width, handlelQrCode])\n\n  // const decodeCallback = useEffect((result, error) => {\n  //   console.log(result, error);\n  //   if (error) {\n  //     throw new Error(error);\n  //   }\n\n  //   if (result) {\n  //     handlelQrCode(result.getText());\n  //   }\n  // }, [handlelQrCode])\n\n  useEffect(() => {\n    // On mount - get the media stream, set it to the video element, and init animation frames.\n    (async () => {\n      try {\n        console.log('newwwww')\n        const hasUserMedia = Boolean(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n\n        if (hasUserMedia && videoRef.current) {\n          // `getUserMedia` can only be used from a HTTPS URL, localhost, of a file:// URL.\n          // const mediaStream = await navigator.mediaDevices.getUserMedia({\n          //   audio: false,\n          //   video: { height, width, aspectRatio: width / height, facingMode: \"environment\" },\n          // });\n\n          // videoRef.current.srcObject = mediaStream;\n\n          // const devices = await navigator.mediaDevices.enumerateDevices();\n          // const environmentVideoDevice = devices.find(x => x.kind === 'videoinput' && x.label === 'Back Camera');\n\n          // if (!environmentVideoDevice) {\n          //   throw new Error('No environment video device found');\n          // }\n\n          const codeReader = new BrowserQRCodeReader();\n\n          // const result = await codeReader.decodeFromStream(mediaStream, videoRef.current);\n          const result = await codeReader.decodeFromInputVideoDevice(undefined, videoRef.current);\n\n          handlelQrCode(result.text);\n\n          // requestAnimationFrame(scan)\n        }\n      } catch(err) {\n        console.log(err);\n      }\n    })()\n  }, [videoRef, height, width, scan, handlelQrCode]);\n\n  return (\n    <Fragment>\n      <canvas hidden={true} ref={canvasRef} />\n      <video ref={videoRef} playsInline={true} />\n      {qrCode !== null && <div className=\"qr-code\">{qrCode}</div>}\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport { QRCodeReader } from './QrCodeReader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QRCodeReader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}